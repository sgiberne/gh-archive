<?php

namespace App\Tests\Domain\Factory\Data;

use App\Domain\Entity\Actor;
use App\Domain\Entity\Event;
use App\Domain\Entity\Repository;
use App\Domain\Factory\Data\ActorFactory;
use App\Domain\Factory\Data\EventFactory;
use App\Domain\Factory\Data\OrganisationFactory;
use App\Domain\Factory\Data\RepositoryFactory;
use PHPUnit\Framework\TestCase;

class EventFactoryTest extends TestCase
{
    private ?EventFactory $eventFactory;

    /**
     * @dataProvider provideValidData
     */
    public function testCreate(array $data, Event $expectedEvent): void
    {
        $event = $this->eventFactory->createFromArray($data);

        $this->assertEquals($event, $expectedEvent);
    }

    /**
     * @dataProvider provideInvalidData
     */
    public function testCreateWithInvalidData(array $data): void
    {
        $this->expectException(\BadMethodCallException::class);

        $this->eventFactory->createFromArray($data);
    }

    public function provideValidData(): iterable
    {
        yield [
            [
                'id' => 1,
                'repo' => ['id' => 1],
                'actor' => ['id' => 1],
            ],
            (new Event())
                ->setId(1)
                ->setActor(
                    (new Actor())
                        ->setId(1)
                        ->setUrl('')
                        ->setAvatarUrl('')
                        ->setGravatarId('')
                        ->setLogin('')
                        ->setDisplayLogin('')
                )
                ->setRepository(
                    (new Repository())
                        ->setId(1)
                        ->setUrl('')
                        ->setName('')
                )
                ->setOrganisation(null),
        ];

        yield [
            [
                'id' => 1,
                'public' => false,
                'created_at' => '2020-11-01 12:00:00',
                'type' => 'commit',
                'payload' => ['test' => 'test payload'],
                'repo' => ['id' => 1],
                'actor' => ['id' => 1],
            ],
            (new Event())
                ->setId(1)
                ->setCreatedAt(new \DateTime('2020-11-01 12:00:00'))
                ->setPublic(false)
                ->setType('commit')
                ->setPayload(['test' => 'test payload'])
                ->setActor(
                    (new Actor())
                        ->setId(1)
                        ->setUrl('')
                        ->setAvatarUrl('')
                        ->setGravatarId('')
                        ->setLogin('')
                        ->setDisplayLogin('')
                )
                ->setRepository(
                    (new Repository())
                        ->setId(1)
                        ->setUrl('')
                        ->setName('')
                )
                ->setOrganisation(null),
        ];
    }

    public function provideInvalidData(): iterable
    {
        yield [
            [
                'public' => false,
                'created_at' => '2020-11-01 12:00:00',
                'type' => 'commit',
                'payload' => ['test' => 'test payload'],
                'repo' => ['id' => 1],
                'actor' => ['id' => 1],
            ],
        ];
    }

    public function setUp(): void
    {
        $actorFactory = new ActorFactory();
        $repositoryFactory = new RepositoryFactory();
        $organisationFactory = new OrganisationFactory();

        $this->eventFactory = new EventFactory($actorFactory, $repositoryFactory, $organisationFactory);

        parent::setUp();
    }

    public function tearDown()
    {
        $this->eventFactory = null;

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
